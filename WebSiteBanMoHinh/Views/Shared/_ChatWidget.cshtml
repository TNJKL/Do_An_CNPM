@model WebSiteBanMoHinh.ViewModels.CombinedMessagesViewModel

<style>
    :root {
        --primary-color: #facc15;
        --secondary-color: #fbbf24;
        --accent-color: #f59e0b;
        --light-bg: #fefce8;
        --dark-bg: #1e293b;
        --dark-text: #1e293b;
        --light-text: #fff7ed;
        --border-radius: 12px; /* Giảm border-radius cho gọn */
        --shadow: 0 4px 15px rgba(0, 0, 0, 0.08); /* Shadow nhẹ hơn */
        --shadow-hover: 0 6px 18px rgba(0, 0, 0, 0.12);
        --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .chat-widget {
        position: fixed;
        bottom: 15px; /* Giảm khoảng cách bottom */
        right: 15px; /* Giảm khoảng cách right */
        width: 320px; /* Thu nhỏ chiều rộng */
        max-height: 450px; /* Giảm chiều cao tối đa */
        border-radius: var(--border-radius);
        box-shadow: var(--shadow);
        overflow: hidden;
        transition: transform 0.3s ease-in-out;
        background: white;
        font-family: 'Segoe UI', sans-serif; /* Font mượt mà hơn */
        z-index: 1000;
    }

        .chat-widget.collapsed .chat-body {
            display: none;
        }

    .chat-header {
        display: flex;
        align-items: center;
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        padding: 8px 12px; /* Giảm padding */
        cursor: pointer;
    }

        .chat-header .avatar {
            width: 36px; /* Thu nhỏ avatar */
            height: 36px;
            background: linear-gradient(135deg, var(--accent-color), #f97316);
            color: var(--dark-text);
            font-size: 18px; /* Giảm font-size */
            font-weight: 600;
            display: flex;
            justify-content: center;
            align-items: center;
            border-radius: 50%;
            margin-right: 8px; /* Giảm margin */
            border: 2px solid rgba(255, 255, 255, 0.9);
            box-shadow: var(--shadow);
        }

        .chat-header .user-info h3 {
            font-size: 16px; /* Giảm kích thước chữ */
            margin: 0;
            color: var(--dark-text);
        }

    .chat-body {
        display: flex;
        flex-direction: column;
        height: 360px; /* Giảm chiều cao chat body */
    }

    .messages-container {
        flex-grow: 1;
        overflow-y: auto;
        padding: 12px; /* Giảm padding */
        background: var(--light-bg);
        display: flex;
        flex-direction: column;
        gap: 8px; /* Giảm khoảng cách giữa các tin nhắn */
    }

    .message-bubble {
        padding: 8px 12px; /* Giảm padding */
        border-radius: var(--border-radius);
        max-width: 75%; /* Tăng nhẹ max-width cho cân đối */
        box-shadow: var(--shadow);
        transition: var(--transition);
        word-wrap: break-word;
    }

    .message-sent {
        align-self: flex-end;
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: var(--dark-text);
        border-bottom-right-radius: 3px;
    }

    .message-received {
        align-self: flex-start;
        background: rgba(255, 255, 255, 0.95); /* Tăng độ trong suốt nhẹ */
        color: var(--dark-text);
        border: 1px solid rgba(254, 243, 199, 0.6);
        border-bottom-left-radius: 3px;
    }

    .message-content {
        margin: 0;
        font-size: 13px; /* Giảm font-size */
        line-height: 1.3; /* Giảm line-height */
    }

    .message-time {
        font-size: 10px; /* Giảm font-size */
        text-align: right;
        margin-top: 4px;
        opacity: 0.6; /* Tăng độ trong suốt */
    }

    .message-input-container {
        display: flex;
        align-items: center;
        padding: 8px 12px; /* Giảm padding */
        border-top: 1px solid rgba(254, 243, 199, 0.4);
        background: white;
    }

    .message-input {
        flex-grow: 1;
        border: none;
        background: var(--light-bg);
        border-radius: 18px; /* Giảm border-radius */
        padding: 7px 10px; /* Giảm padding */
        font-size: 13px; /* Giảm font-size */
        resize: none;
        transition: var(--transition);
        box-shadow: inset 0 1px 4px rgba(0, 0, 0, 0.03);
    }

        .message-input:focus {
            outline: none;
            box-shadow: 0 0 0 2px rgba(250, 204, 21, 0.25), inset 0 1px 4px rgba(0, 0, 0, 0.03);
        }

    .send-button {
        width: 32px; /* Thu nhỏ nút gửi */
        height: 32px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, var(--primary-color), var(--accent-color));
        color: var(--dark-text);
        border: none;
        margin-left: 6px; /* Giảm margin */
        cursor: pointer;
        transition: var(--transition);
        box-shadow: var(--shadow);
    }

        .send-button:hover {
            transform: scale(1.08); /* Giảm hiệu ứng phóng to */
            box-shadow: var(--shadow-hover);
        }

    .send-icon {
        font-size: 14px; /* Giảm kích thước icon */
    }

    /* Tùy chỉnh thanh cuộn */
    .messages-container::-webkit-scrollbar {
        width: 6px;
    }

    .messages-container::-webkit-scrollbar-track {
        background: var(--light-bg);
    }

    .messages-container::-webkit-scrollbar-thumb {
        background: var(--accent-color);
        border-radius: 10px;
    }
</style>

<!-- Markup cho Chat Widget -->
<!-- CSS giữ nguyên -->

<div id="chatWidget" class="chat-widget collapsed">
    <div class="chat-header" id="chatToggle">
        <div class="avatar">
            @(!string.IsNullOrEmpty(Model.Chat?.ReceiverUserName) ? Model.Chat.ReceiverUserName.Substring(0, 1).ToUpper() : "C")
        </div>
        <div class="user-info">
            <h3>Chăm sóc khách hàng</h3>
        </div>
    </div>
    <div class="chat-body">
        <div class="messages-container" id="messagesContainerWidget">
            @if (Model.Chat != null)
            {
                foreach (var item in Model.Chat.Messages)
                {
                    if (item.IsCurrentUserSentMessage)
                    {
                        <div class="message-bubble message-sent">
                            <p class="message-content">@item.Text</p>
                            <span class="message-time">@item.Time · @item.Date</span>
                        </div>
                    }
                    else
                    {
                        <div class="message-bubble message-received">
                            <p class="message-content">@item.Text</p>
                            <span class="message-time">@item.Time · @item.Date</span>
                        </div>
                    }
                }
            }
        </div>
        <div class="message-input-container">
            <textarea class="message-input" id="messageFieldWidget" placeholder="Nhập tin nhắn..." rows="1"></textarea>
            <button class="send-button" id="sendBtnWidget">
                <span class="send-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
                         stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <line x1="22" y1="2" x2="11" y2="13"></line>
                        <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
                    </svg>
                </span>
            </button>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>

<script>
    $(document).ready(function () {
        $("#chatToggle").click(function () {
            $("#chatWidget").toggleClass("collapsed");
        });

        const messageField = document.getElementById('messageFieldWidget');
        messageField.addEventListener('input', function () {
            this.style.height = 'auto';
            this.style.height = (this.scrollHeight < 120 ? this.scrollHeight + 'px' : '120px');
        });

        const currentUserId = "@Model.Chat?.CurrentUserId";
        const receiverId = "@Model.Chat?.ReceiverId";

        if (!currentUserId) {
            console.error("currentUserId không được định nghĩa!");
            return;
        }

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .withAutomaticReconnect()
            .build();

        connection.start()
            .then(() => {
                console.log("Đã kết nối với chat hub!");
                if (receiverId) {
                    connection.invoke("GetChatHistory", receiverId)
                        .catch(err => console.error("Lỗi tải lịch sử chat:", err));
                }
            })
            .catch(err => console.error("Lỗi kết nối SignalR:", err));

        $("#sendBtnWidget").click(sendMessage);
        $("#messageFieldWidget").on('keydown', function (e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });

        function sendMessage() {
            const message = $("#messageFieldWidget").val().trim();
            if (!message || !receiverId) {
                console.error("Thiếu receiverId hoặc message rỗng!");
                return;
            }

            const date = new Date().toLocaleDateString();
            const time = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

            appendMessage(message, date, time, true);

            connection.invoke("SendMessage", receiverId, message)
                .catch(err => {
                    console.error("Lỗi gửi tin nhắn:", err);
                    alert("Không thể gửi tin nhắn!");
                });

            $("#messageFieldWidget").val("").focus().css("height", "auto");
        }

        connection.on("ReceiveMessage", function (msg, date, time, senderId) {
            console.log("ReceiveMessage:", { msg, date, time, senderId, currentUserId, receiverId });
            if (senderId === currentUserId || senderId === receiverId) {
                const isSent = senderId === currentUserId;
                // Sửa kiểm tra trùng lặp tin nhắn
                const existingMessage = Array.from(document.querySelectorAll('#messagesContainerWidget .message-content'))
                    .some(el => el.textContent.trim() === msg.trim());
                if (!existingMessage) {
                    console.log("Thêm tin nhắn vào UI:", { msg, isSent });
                    appendMessage(msg, date, time, isSent);
                    if (!isSent) {
                        $("#chatWidget").removeClass("collapsed"); // Mở widget khi nhận tin nhắn từ nhân viên
                    }
                } else {
                    console.log("Tin nhắn đã tồn tại, bỏ qua:", msg);
                }
            }
            if (senderId !== currentUserId) {
                playNotificationSound();
            }
        });

        connection.on("LoadChatHistory", function (messages) {
            console.log("LoadChatHistory:", messages);
            $("#messagesContainerWidget").empty();
            messages.forEach(msg => {
                const isSent = msg.senderId === currentUserId;
                appendMessage(msg.text, msg.date, msg.time, isSent);
            });
            scrollToBottom();
        });

        function appendMessage(msg, date, time, isSent) {
            const messageClass = isSent ? "message-sent" : "message-received";
            const messageHtml = `
                <div class="message-bubble ${messageClass}">
                    <p class="message-content">${msg}</p>
                    <span class="message-time">${time} · ${date}</span>
                </div>`;
            console.log("Appending:", messageHtml);
            const $container = $("#messagesContainerWidget");
            if ($container.length) {
                $container.append(messageHtml);
                scrollToBottom();
            } else {
                console.error("Không tìm thấy #messagesContainerWidget!");
            }
        }

        function scrollToBottom() {
            const container = document.getElementById('messagesContainerWidget');
            if (container) {
                container.scrollTop = container.scrollHeight;
            } else {
                console.error("Không tìm thấy container để scroll!");
            }
        }

        function playNotificationSound() {
            const audio = new Audio('/sounds/notification.mp3');
            audio.volume = 0.5;
            audio.play().catch(e => console.log("Lỗi phát âm thanh:", e));
        }
    });
</script>

<script>
    console.log("Model.Chat:", {
        CurrentUserId: "@Model.Chat?.CurrentUserId",
        ReceiverId: "@Model.Chat?.ReceiverId",
        ReceiverUserName: "@Model.Chat?.ReceiverUserName"
    });
</script>